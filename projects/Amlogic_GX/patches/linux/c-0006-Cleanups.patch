From 2105db5ad4b0cc7ccf006042fe41c90b2f2a96e4 Mon Sep 17 00:00:00 2001
From: Maxime Jourdan <maxi.jourdan@wanadoo.fr>
Date: Sun, 12 Aug 2018 14:21:25 +0200
Subject: [PATCH 06/11] Cleanups

---
 drivers/media/platform/meson/vdec/codec_h264.c   | 83 ++++++++++++------------
 drivers/media/platform/meson/vdec/codec_hevc.c   |  3 -
 drivers/media/platform/meson/vdec/codec_mpeg12.c |  3 -
 drivers/media/platform/meson/vdec/codec_mpeg4.c  |  3 -
 drivers/media/platform/meson/vdec/esparser.c     |  8 ++-
 drivers/media/platform/meson/vdec/vdec.c         |  4 ++
 6 files changed, 52 insertions(+), 52 deletions(-)

diff --git a/drivers/media/platform/meson/vdec/codec_h264.c b/drivers/media/platform/meson/vdec/codec_h264.c
index 4e3db70..7dffd59 100644
--- a/drivers/media/platform/meson/vdec/codec_h264.c
+++ b/drivers/media/platform/meson/vdec/codec_h264.c
@@ -15,45 +15,52 @@
 #define SIZE_SEI	(8 * SZ_1K)
 
 /* Offset added by the firmware which must be substracted
- * from the workspace paddr
+ * from the workspace phyaddr
  */
-#define DEF_BUF_START_ADDR 0x1000000
+#define WORKSPACE_BUF_OFFSET	0x1000000
 
 /* DOS registers */
 #define ASSIST_MBOX1_CLR_REG	0x01d4
 #define ASSIST_MBOX1_MASK	0x01d8
 
-#define LMEM_DMA_CTRL 0x0d40
+#define LMEM_DMA_CTRL		0x0d40
 
-#define PSCALE_CTRL 0x2444
+#define PSCALE_CTRL		0x2444
 
 #define MDEC_PIC_DC_CTRL	0x2638
 #define ANC0_CANVAS_ADDR	0x2640
 #define MDEC_PIC_DC_THRESH	0x26e0
 
-#define AV_SCRATCH_0	0x2700
-#define AV_SCRATCH_1	0x2704
-#define AV_SCRATCH_2	0x2708
-#define AV_SCRATCH_3	0x270c
-#define AV_SCRATCH_4	0x2710
-#define AV_SCRATCH_5	0x2714
-#define AV_SCRATCH_6	0x2718
-#define AV_SCRATCH_7	0x271c
-#define AV_SCRATCH_8	0x2720
-#define AV_SCRATCH_9	0x2724
-#define AV_SCRATCH_D	0x2734
-#define AV_SCRATCH_F	0x273c
-#define AV_SCRATCH_G	0x2740
-#define AV_SCRATCH_H	0x2744
-#define AV_SCRATCH_I	0x2748
-#define AV_SCRATCH_J	0x274c
+#define AV_SCRATCH_0		0x2700
+#define AV_SCRATCH_1		0x2704
+#define AV_SCRATCH_2		0x2708
+#define AV_SCRATCH_3		0x270c
+#define AV_SCRATCH_4		0x2710
+#define AV_SCRATCH_5		0x2714
+#define AV_SCRATCH_6		0x2718
+#define AV_SCRATCH_7		0x271c
+#define AV_SCRATCH_8		0x2720
+#define AV_SCRATCH_9		0x2724
+#define AV_SCRATCH_D		0x2734
+#define AV_SCRATCH_F		0x273c
+#define AV_SCRATCH_G		0x2740
+#define AV_SCRATCH_H		0x2744
+#define AV_SCRATCH_I		0x2748
+#define AV_SCRATCH_J		0x274c
 	#define SEI_DATA_READY BIT(15)
 
-#define POWER_CTL_VLD 0x3020
+#define POWER_CTL_VLD		0x3020
 
-#define DCAC_DMA_CTRL 0x3848
+#define DCAC_DMA_CTRL		0x3848
 
-#define DOS_SW_RESET0 0xfc00
+#define DOS_SW_RESET0		0xfc00
+
+/* ISR status */
+#define CMD_SET_PARAM		1
+#define CMD_FRAMES_READY	2
+#define CMD_FATAL_ERROR		6
+#define CMD_BAD_WIDTH		7
+#define CMD_BAD_HEIGHT		8
 
 struct codec_h264 {
 	/* H.264 decoder requires an extended firmware loaded in contiguous RAM */
@@ -69,7 +76,7 @@ struct codec_h264 {
 	dma_addr_t ref_paddr;
 	u32	   ref_size;
 
-	/* Buffer for parsed SEI data ; > M8 ? */
+	/* Buffer for parsed SEI data */
 	void      *sei_vaddr;
 	dma_addr_t sei_paddr;
 };
@@ -130,7 +137,7 @@ static int codec_h264_start(struct vdec_session *sess) {
 	writel_relaxed(0, core->dos_base + PSCALE_CTRL);
 	writel_relaxed(0, core->dos_base + AV_SCRATCH_0);
 
-	workspace_offset = h264->workspace_paddr - DEF_BUF_START_ADDR;
+	workspace_offset = h264->workspace_paddr - WORKSPACE_BUF_OFFSET;
 	writel_relaxed(workspace_offset, core->dos_base + AV_SCRATCH_1);
 	writel_relaxed(h264->ext_fw_paddr, core->dos_base + AV_SCRATCH_G);
 	writel_relaxed(h264->sei_paddr - workspace_offset, core->dos_base + AV_SCRATCH_I);
@@ -140,7 +147,7 @@ static int codec_h264_start(struct vdec_session *sess) {
 	writel_relaxed(0, core->dos_base + AV_SCRATCH_9);
 
 	/* Enable "error correction", don't know what it means */
-	writel_relaxed((readl_relaxed(core->dos_base + AV_SCRATCH_F) & 0xffffffc3) | (1 << 4), core->dos_base + AV_SCRATCH_F);
+	writel_relaxed((readl_relaxed(core->dos_base + AV_SCRATCH_F) & 0xffffffc3) | (1 << 4) | (1 << 7), core->dos_base + AV_SCRATCH_F);
 
 	/* Enable IRQ */
 	writel_relaxed(1, core->dos_base + ASSIST_MBOX1_CLR_REG);
@@ -174,9 +181,6 @@ static int codec_h264_stop(struct vdec_session *sess)
 	
 	if (h264->sei_vaddr)
 		dma_free_coherent(core->dev, SIZE_SEI, h264->sei_vaddr, h264->sei_paddr);
-
-	kfree(h264);
-	sess->priv = 0;
 	
 	return 0;
 }
@@ -228,7 +232,7 @@ static void codec_h264_set_param(struct vdec_session *sess) {
 	mb_total = (parsed_info >> 8) & 0xffff;
 
 	/* Size of Motion Vector per macroblock ? */
-	mb_mv_byte = (parsed_info & 0x80000000) ? 24 : 96;
+	mb_mv_byte = 96;
 
 	/* Number of macroblocks per line */
 	mb_width = parsed_info & 0xff;
@@ -297,9 +301,10 @@ static void codec_h264_frames_ready(struct vdec_session *sess, u32 status)
 		 * Typical reason is a temporarily corrupted bitstream
 		 */
 		if (error)
-			dev_info(core->dev, "Buffer %d decode error: %08X\n",
-				buffer_index, error);
+			dev_info(core->dev, "Buffer %d decode error\n",
+				 buffer_index);
 
+		//printk("done %d/%d: %d\n", i, num_frames, buffer_index);
 		vdec_dst_buf_done_idx(sess, buffer_index);
 	}
 }
@@ -314,23 +319,21 @@ static irqreturn_t codec_h264_threaded_isr(struct vdec_session *sess)
 	status = readl_relaxed(core->dos_base + AV_SCRATCH_0);
 	cmd = status & 0xff;
 
-	dev_dbg(core->dev, "H264 status: %08X\n", status);
-
 	switch (cmd) {
-	case 1:
+	case CMD_SET_PARAM:
 		codec_h264_set_param(sess);
 		break;
-	case 2:
+	case CMD_FRAMES_READY:
 		codec_h264_frames_ready(sess, status);
 		break;
-	case 6:
+	case CMD_FATAL_ERROR:
 		dev_err(core->dev, "H.264 decoder fatal error\n");
 		goto abort;
-	case 7:
+	case CMD_BAD_WIDTH:
 		size = (readl_relaxed(core->dos_base + AV_SCRATCH_1) + 1) * 16;
 		dev_err(core->dev, "Unsupported video width: %u\n", size);
 		goto abort;
-	case 8:
+	case CMD_BAD_HEIGHT:
 		size = (readl_relaxed(core->dos_base + AV_SCRATCH_1) + 1) * 16;
 		dev_err(core->dev, "Unsupported video height: %u\n", size);
 		goto abort;
@@ -341,7 +344,7 @@ static irqreturn_t codec_h264_threaded_isr(struct vdec_session *sess)
 		break;
 	}
 
-	if (cmd > 1)
+	if (cmd != CMD_SET_PARAM)
 		writel_relaxed(0, core->dos_base + AV_SCRATCH_0);
 
 	/* Decoder has some SEI data for us ; ignore */
diff --git a/drivers/media/platform/meson/vdec/codec_hevc.c b/drivers/media/platform/meson/vdec/codec_hevc.c
index 47e5fbe..a0a6cf1 100644
--- a/drivers/media/platform/meson/vdec/codec_hevc.c
+++ b/drivers/media/platform/meson/vdec/codec_hevc.c
@@ -771,9 +771,6 @@ static int codec_hevc_stop(struct vdec_session *sess)
 				  hevc->aux_vaddr, hevc->aux_paddr);
 		hevc->aux_vaddr = 0;
 	}
-
-	kfree(hevc);
-	sess->priv = 0;
 	mutex_unlock(&sess->codec_lock);
 
 	return 0;
diff --git a/drivers/media/platform/meson/vdec/codec_mpeg12.c b/drivers/media/platform/meson/vdec/codec_mpeg12.c
index a85046d..0a07cee 100644
--- a/drivers/media/platform/meson/vdec/codec_mpeg12.c
+++ b/drivers/media/platform/meson/vdec/codec_mpeg12.c
@@ -117,9 +117,6 @@ static int codec_mpeg12_stop(struct vdec_session *sess)
 		mpeg12->workspace_vaddr = 0;
 	}
 
-	kfree(mpeg12);
-	sess->priv = 0;
-
 	return 0;
 }
 
diff --git a/drivers/media/platform/meson/vdec/codec_mpeg4.c b/drivers/media/platform/meson/vdec/codec_mpeg4.c
index 911d303..3093946 100644
--- a/drivers/media/platform/meson/vdec/codec_mpeg4.c
+++ b/drivers/media/platform/meson/vdec/codec_mpeg4.c
@@ -150,9 +150,6 @@ static int codec_mpeg4_stop(struct vdec_session *sess)
 		mpeg4->workspace_vaddr = 0;
 	}
 
-	kfree(mpeg4);
-	sess->priv = 0;
-
 	return 0;
 }
 
diff --git a/drivers/media/platform/meson/vdec/esparser.c b/drivers/media/platform/meson/vdec/esparser.c
index f9d8560..52369e2 100644
--- a/drivers/media/platform/meson/vdec/esparser.c
+++ b/drivers/media/platform/meson/vdec/esparser.c
@@ -49,7 +49,7 @@
 	#define MEM_BUFCTRL_MANUAL	BIT(1)
 
 #define SEARCH_PATTERN_LEN	512
-#define MIN_PACKET_SIZE	(4 * SZ_1K)
+#define MIN_PACKET_SIZE		(4 * SZ_1K)
 
 static DECLARE_WAIT_QUEUE_HEAD(wq);
 static int search_done;
@@ -58,7 +58,7 @@ static int search_done;
  * Credits to Endless Mobile.
  */
 #define EOS_TAIL_BUF_SIZE 1024
-static const u8 eos_tail_data[] = {
+static const u8 eos_tail_data[EOS_TAIL_BUF_SIZE] = {
 	0x00, 0x00, 0x00, 0x01, 0x06, 0x05, 0xff, 0xe4, 0xdc, 0x45, 0xe9, 0xbd, 0xe6, 0xd9, 0x48, 0xb7,
 	0x96, 0x2c, 0xd8, 0x20, 0xd9, 0x23, 0xee, 0xef, 0x78, 0x32, 0x36, 0x34, 0x20, 0x2d, 0x20, 0x63,
 	0x6f, 0x72, 0x65, 0x20, 0x36, 0x37, 0x20, 0x72, 0x31, 0x31, 0x33, 0x30, 0x20, 0x38, 0x34, 0x37,
@@ -130,9 +130,10 @@ static u32 esparser_pad_start_code(struct vb2_buffer *vb)
 
 	if (payload_size < MIN_PACKET_SIZE) {
 		pad_size = MIN_PACKET_SIZE - payload_size;
-		memset(&vaddr[0], 0, pad_size);
+		memset(vaddr, 0, pad_size);
 	}
 
+	memset(vaddr + pad_size + 4, 0, 508);
 	vaddr[pad_size]     = 0x00;
 	vaddr[pad_size + 1] = 0x00;
 	vaddr[pad_size + 2] = 0x01;
@@ -187,6 +188,7 @@ int esparser_queue_eos(struct vdec_session *sess)
 	if (!eos_vaddr)
 		return -ENOMEM;
 
+	memset(eos_vaddr, 0, EOS_TAIL_BUF_SIZE + 512);
 	memcpy(eos_vaddr, eos_tail_data, sizeof(eos_tail_data));
 	ret = esparser_write_data(core, eos_paddr, EOS_TAIL_BUF_SIZE);
 	dma_free_coherent(dev, EOS_TAIL_BUF_SIZE + 512,
diff --git a/drivers/media/platform/meson/vdec/vdec.c b/drivers/media/platform/meson/vdec/vdec.c
index f306568..135f12e 100644
--- a/drivers/media/platform/meson/vdec/vdec.c
+++ b/drivers/media/platform/meson/vdec/vdec.c
@@ -264,6 +264,10 @@ void vdec_stop_streaming(struct vb2_queue *q)
 		dma_free_coherent(sess->core->dev, sess->vififo_size, sess->vififo_vaddr, sess->vififo_paddr);
 		INIT_LIST_HEAD(&sess->bufs);
 		INIT_LIST_HEAD(&sess->bufs_recycle);
+		if (sess->priv) {
+			kfree(sess->priv);
+			sess->priv = NULL;
+		}
 	}
 
 	if (q->type == V4L2_BUF_TYPE_VIDEO_OUTPUT_MPLANE) {
-- 
2.7.4

