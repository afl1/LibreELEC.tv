From 70a93b98decc1595e25f8a5a04ca0d62dd6e428c Mon Sep 17 00:00:00 2001
From: kszaq <kszaquitto@gmail.com>
Date: Sat, 8 Apr 2017 01:54:37 +0200
Subject: [PATCH] EGLNativeTypeAmlogic: implement Nougat-kernel style
 fractional frame rates

---
 xbmc/windowing/egl/EGLNativeTypeAmlogic.cpp | 35 +++++++++++++++++++++--------
 xbmc/windowing/egl/EGLNativeTypeAmlogic.h   |  2 +-
 2 files changed, 27 insertions(+), 10 deletions(-)

diff --git a/xbmc/windowing/egl/EGLNativeTypeAmlogic.cpp b/xbmc/windowing/egl/EGLNativeTypeAmlogic.cpp
index 67f9984..cba0266 100644
--- a/xbmc/windowing/egl/EGLNativeTypeAmlogic.cpp
+++ b/xbmc/windowing/egl/EGLNativeTypeAmlogic.cpp
@@ -29,6 +29,7 @@
 #include <linux/fb.h>
 #include <sys/ioctl.h>
 #include <EGL/egl.h>
+#include <math.h>
 
 CEGLNativeTypeAmlogic::CEGLNativeTypeAmlogic()
 {
@@ -143,11 +144,7 @@ bool CEGLNativeTypeAmlogic::SetNativeResolution(const RESOLUTION_INFO &res)
   }
 #endif
 
-  // Don't set the same mode as current
-  std::string mode;
-  SysfsUtils::GetString("/sys/class/display/mode", mode);
-  if (res.strId != mode)
-    result = SetDisplayResolution(res.strId.c_str());
+  result = SetDisplayResolution(res);
 
   DealWithScale(res);
 
@@ -166,6 +163,22 @@ bool CEGLNativeTypeAmlogic::ProbeResolutions(std::vector<RESOLUTION_INFO> &resol
   {
     if(aml_mode_to_resolution(i->c_str(), &res))
       resolutions.push_back(res);
+
+    switch ((int)res.fRefreshRate)
+    {
+      case 24:
+        res.fRefreshRate = 24000.0/1001.0;
+        resolutions.push_back(res);
+        break;
+      case 30:
+        res.fRefreshRate = 30000.0/1001.0;
+        resolutions.push_back(res);
+        break;
+      case 60:
+        res.fRefreshRate = 60000.0/1001.0;
+        resolutions.push_back(res);
+        break;
+    }
   }
   return resolutions.size() > 0;
 
@@ -190,14 +203,18 @@ bool CEGLNativeTypeAmlogic::ShowWindow(bool show)
   return true;
 }
 
-bool CEGLNativeTypeAmlogic::SetDisplayResolution(const char *resolution)
+bool CEGLNativeTypeAmlogic::SetDisplayResolution(const RESOLUTION_INFO &res)
 {
-  std::string mode = resolution;
+  std::string mode = res.strId.c_str();
+
   // switch display resolution
+  SysfsUtils::SetString("/sys/class/display/mode", "null");
+
+  std::string fractional_rate = (res.fRefreshRate == floor(res.fRefreshRate)) ? "0" : "1";
+  SysfsUtils::SetString("/sys/class/amhdmitx/amhdmitx0/frac_rate_policy", fractional_rate.c_str());
+
   SysfsUtils::SetString("/sys/class/display/mode", mode.c_str());
 
-  RESOLUTION_INFO res;
-  aml_mode_to_resolution(mode.c_str(), &res);
   SetFramebufferResolution(res);
 
   return true;
diff --git a/xbmc/windowing/egl/EGLNativeTypeAmlogic.h b/xbmc/windowing/egl/EGLNativeTypeAmlogic.h
index 96aa6f7..b7c053b 100644
--- a/xbmc/windowing/egl/EGLNativeTypeAmlogic.h
+++ b/xbmc/windowing/egl/EGLNativeTypeAmlogic.h
@@ -51,7 +51,7 @@ public:
   virtual bool  ShowWindow(bool show);
 
 protected:
-  bool SetDisplayResolution(const char *resolution);
+  bool SetDisplayResolution(const RESOLUTION_INFO &res);
   void SetupVideoScaling(const char *mode);
   void DealWithScale(const RESOLUTION_INFO &res);
   void EnableFreeScale(const RESOLUTION_INFO &res);
-- 
1.8.3.1

