From 4448618220a54a23b3a059ef202d390be685c5c3 Mon Sep 17 00:00:00 2001
From: RealJohnGalt <johngalt@fake.mail>
Date: Fri, 7 Jul 2017 00:10:03 -0700
Subject: [PATCH] VideoPlayer: @afl1 channel and chapter skip fix

---
 xbmc/cores/VideoPlayer/VideoPlayer.cpp      | 43 ++++++++++++++++++++++-------
 xbmc/cores/VideoPlayer/VideoPlayerAudio.cpp |  9 +++---
 2 files changed, 38 insertions(+), 14 deletions(-)

diff --git a/xbmc/cores/VideoPlayer/VideoPlayer.cpp b/xbmc/cores/VideoPlayer/VideoPlayer.cpp
index ce0f01a..1adf29d 100644
--- a/xbmc/cores/VideoPlayer/VideoPlayer.cpp
+++ b/xbmc/cores/VideoPlayer/VideoPlayer.cpp
@@ -1963,15 +1963,17 @@ void CVideoPlayer::HandlePlaySpeed()
       // care for live streams
       else if (m_pInputStream->IsRealtime())
       {
-        if (m_CurrentAudio.id >= 0)
+        if (m_CurrentAudio.id >= 0 && m_clock.GetClock() > DVD_MSEC_TO_TIME(0))
         {
           double adjust = -1.0; // a unique value
-          if (m_clock.GetSpeedAdjust() >= 0 && m_VideoPlayerAudio->GetLevel() < 5)
-            adjust = -0.05;
-
-          if (m_clock.GetSpeedAdjust() < 0 && m_VideoPlayerAudio->GetLevel() > 10)
+          if (m_clock.GetSpeedAdjust() >= 0 && m_VideoPlayerAudio->GetLevel() < 3) {
+            CLog::Log(LOGDEBUG, "VideoPlayer:Speed adjust:-0.05 aq:%d", m_VideoPlayerAudio->GetLevel());  
+             adjust = -0.05;
+          }
+          if (m_clock.GetSpeedAdjust() < 0 && m_VideoPlayerAudio->GetLevel() > 5) {
+            CLog::Log(LOGDEBUG, "VideoPlayer:Speed adjust:0.0 aq:%d", m_VideoPlayerAudio->GetLevel());  
             adjust = 0.0;
-
+          }
           if (adjust != -1.0)
           {
             m_clock.SetSpeedAdjust(adjust);
@@ -2028,8 +2047,8 @@ void CVideoPlayer::HandlePlaySpeed()
       }
       else if (m_CurrentAudio.starttime != DVD_NOPTS_VALUE && m_CurrentAudio.packets > 0)
       {
         if (m_pInputStream->IsRealtime())
-          clock = m_CurrentAudio.starttime - m_CurrentAudio.cachetotal - DVD_MSEC_TO_TIME(400);
+          clock = m_CurrentAudio.starttime - m_CurrentAudio.cachetotal;
         else
           clock = m_CurrentAudio.starttime - m_CurrentAudio.cachetime;
 
@@ -2619,6 +2641,7 @@ void CVideoPlayer::HandleMessages()
       {
-        FlushBuffers(start, true, true);
-        offset = DVD_TIME_TO_MSEC(start) - beforeSeek;
+        FlushBuffers(DVD_MSEC_TO_TIME(beforeSeek), true, true);
+        offset = static_cast<int>(beforeSeek) - DVD_TIME_TO_MSEC(start);
+        CLog::Log(LOGDEBUG, "VideoPlayer: SeekChapter:%d beforeSeek:%ld start:%ld",  msg.GetChapter(), beforeSeek, (int64_t)DVD_TIME_TO_MSEC(start)); 
         m_callback.OnPlayBackSeekChapter(msg.GetChapter());
       }
 
--- a/xbmc/cores/VideoPlayer/DVDDemuxers/DVDDemuxFFmpeg.cpp	2017-08-22 23:43:15.624322029 +0200
+++ b/xbmc/cores/VideoPlayer/DVDDemuxers/DVDDemuxFFmpeg.cpp	2017-08-23 08:52:34.490227481 +0200
@@ -1118,6 +1118,7 @@
   if (m_pFormatContext->start_time != (int64_t)AV_NOPTS_VALUE && !ismp3)
     seek_pts += m_pFormatContext->start_time;
 
+  CLog::Log(LOGDEBUG, "CDVDDemuxFFmpeg::%s - seek pts:%0.4f start_time:%ld", __FUNCTION__, (double)seek_pts/AV_TIME_BASE, m_pFormatContext->start_time);
   int ret;
   {
     CSingleLock lock(m_critSection);
@@ -1146,11 +1146,20 @@
   if(m_currentPts == DVD_NOPTS_VALUE)
     CLog::Log(LOGDEBUG, "%s - unknown position after seek", __FUNCTION__);
   else
-    CLog::Log(LOGDEBUG, "%s - seek ended up on time %d", __FUNCTION__, (int)(m_currentPts / DVD_TIME_BASE * 1000));
-
+  {
+    CLog::Log(LOGDEBUG, "CDVDDemuxFFmpeg::%s - seek ended up on time %d", __FUNCTION__, (int)(m_currentPts / DVD_TIME_BASE * 1000));
+    double diff = (double)seek_pts/AV_TIME_BASE - m_currentPts / DVD_TIME_BASE;
+    if (fabs(diff) > 1.0)
+    {
+      ret = av_seek_frame(m_pFormatContext, -1, seek_pts + (int)(diff *  AV_TIME_BASE / 2), backwards ? AVSEEK_FLAG_BACKWARD : 0);
+      if (ret >= 0)
+        UpdateCurrentPTS();
+      CLog::Log(LOGDEBUG, "CDVDDemuxFFmpeg::%s - Seek ended up on time %d", __FUNCTION__, (int)(m_currentPts / DVD_TIME_BASE * 1000));
+    }  
+  }
   // in this case the start time is requested time
   if (startpts)
-    *startpts = DVD_MSEC_TO_TIME(time);
+    *startpts = DVD_MSEC_TO_TIME(m_currentPts/1000);

  if (ret >= 0)
  {
@@ -1717,7 +1717,9 @@
 
   AVChapter *ch = m_pFormatContext->chapters[chapter-1];
   double dts = ConvertTimestamp(ch->start, ch->time_base.den, ch->time_base.num);
-  return SeekTime(DVD_TIME_TO_MSEC(dts), true, startpts);
+  bool rtn = SeekTime(DVD_TIME_TO_MSEC(dts), true, startpts);
+  CLog::Log(LOGDEBUG, "CDVDDemuxFFmpeg::%s - seeking chapter:%d start:%0.4f dts:%0.4f startpts:%0.4f ", __FUNCTION__, chapter, (double)ch->start * ch->time_base.num  / ch->time_base.den , DVD_TIME_TO_MSEC(dts)/1000.0, *startpts);
+  return rtn;
 }
 
 std::string CDVDDemuxFFmpeg::GetStreamCodecName(int iStreamId)
diff --git a/xbmc/cores/VideoPlayer/VideoPlayerAudio.cpp b/xbmc/cores/VideoPlayer/VideoPlayerAudio.cpp
index 38428e2..4279440 100644
--- a/xbmc/cores/VideoPlayer/VideoPlayerAudio.cpp
+++ b/xbmc/cores/VideoPlayer/VideoPlayerAudio.cpp
@@ -293,12 +293,14 @@ void CVideoPlayerAudio::Process()
         // while AE sync is active, we still have time to fill buffers
         if (m_syncTimer.IsTimePast())
         {
-          CLog::Log(LOGNOTICE, "CVideoPlayerAudio::Process - stream stalled");
+          CLog::Log(LOGNOTICE, "CVideoPlayerAudio::Process - stream stalled timeout:%d initialTimeout:%d startTime:%d MillisLeft:%d", timeout, m_syncTimer.GetInitialTimeoutValue(), m_syncTimer.GetStartTime(), m_syncTimer.MillisLeft());
           m_stalled = true;
         }
       }
-      if (timeout == 0)
-        Sleep(10);
+      if (timeout == 0) {
+        CLog::Log(LOGNOTICE, "CVideoPlayerAudio::Process - sleep 0.5 sec");
+        usleep(500000);
+      }
       continue;
     }
 
--- a/xbmc/cores/VideoPlayer/VideoPlayerVideo.cpp	2017-07-31 11:12:34.527417540 +0200
+++ b/xbmc/cores/VideoPlayer/VideoPlayerVideo.cpp	2017-07-31 15:14:58.451688112 +0200
@@ -1041,12 +1041,13 @@
     if (m_iFrameRateCount >= MathUtils::round_int(framerate) * m_iFrameRateLength)
     {
       //store the calculated framerate if it differs too much from m_fFrameRate
-      if (fabs(m_fFrameRate - (m_fStableFrameRate / m_iFrameRateCount)) > MAXFRAMERATEDIFF || m_bFpsInvalid)
+      if (((fabs(2.0 * m_fFrameRate - (m_fStableFrameRate / m_iFrameRateCount)) > MAXFRAMERATEDIFF) &&
+             (fabs(m_fFrameRate - (m_fStableFrameRate / m_iFrameRateCount)) > MAXFRAMERATEDIFF)) || m_bFpsInvalid)
       {
-        CLog::Log(LOGDEBUG,"%s framerate was:%f calculated:%f", __FUNCTION__, m_fFrameRate, m_fStableFrameRate / m_iFrameRateCount);
-        m_fFrameRate = m_fStableFrameRate / m_iFrameRateCount;
-        m_bFpsInvalid = false;
-        m_processInfo.SetVideoFps(m_fFrameRate);
+//      CLog::Log(LOGDEBUG,"%s framerate was:%f calculated:%f", __FUNCTION__, m_fFrameRate, m_fStableFrameRate / m_iFrameRateCount);
+//      m_fFrameRate = m_fStableFrameRate / m_iFrameRateCount;
+//      m_bFpsInvalid = false;
+//      m_processInfo.SetVideoFps(m_fFrameRate);
       }
 
       //reset the stored framerates
@@ -1092,9 +1092,9 @@
     result |= EOS_BUFFER_LEVEL;
-  else if (iBufferLevel < 2)
+  else if ((iBufferLevel < 1) && (pts > 0))
   {
-    result |= EOS_BUFFER_LEVEL;
+//    result |= EOS_BUFFER_LEVEL;
     if (g_advancedSettings.CanLogComponent(LOGVIDEO))
-      CLog::Log(LOGDEBUG,"CVideoPlayerVideo::CalcDropRequirement - hurry: %d", iBufferLevel);
+      CLog::Log(LOGDEBUG,"CVideoPlayerVideo::CalcDropRequirement - hurry: q:%d d:%d lf:%d renderPts:%0.4f pts:%0.4f decPts:%0.2f", queued, discard, lateframes, iRenderPts/ DVD_TIME_BASE, pts / DVD_TIME_BASE, iDecoderPts / DVD_TIME_BASE);
   }
 
   if (m_bAllowDrop)

