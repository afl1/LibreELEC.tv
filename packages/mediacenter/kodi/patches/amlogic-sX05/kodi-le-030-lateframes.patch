From db079d2aa819da24b158ec9040ba7bad768662b4 Mon Sep 17 00:00:00 2001
From: RealJohnGalt <johngalt@fake.mail>
Date: Fri, 7 Jul 2017 00:02:53 -0700
Subject: [PATCH] VideoPlayer: @afl1 lateframes

---
 xbmc/cores/VideoPlayer/VideoRenderers/DebugRenderer.cpp |  4 ++--
 xbmc/cores/VideoPlayer/VideoRenderers/RenderManager.cpp | 10 +++++++---
 2 files changed, 9 insertions(+), 5 deletions(-)

diff --git a/xbmc/cores/VideoPlayer/VideoRenderers/DebugRenderer.cpp b/xbmc/cores/VideoPlayer/VideoRenderers/DebugRenderer.cpp
index b324e3a..7689597 100644
--- a/xbmc/cores/VideoPlayer/VideoRenderers/DebugRenderer.cpp
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/DebugRenderer.cpp
@@ -108,7 +108,7 @@ void CDebugRenderer::CRenderer::Render(int idx)
 {
   std::vector<COverlay*> render;
   std::vector<SElement>& list = m_buffers[idx];
-  float posY = 0.0f;
+  float posY = 200.0f;
   for (std::vector<SElement>::iterator it = list.begin(); it != list.end(); ++it)
   {
     COverlay* o = nullptr;
diff --git a/xbmc/cores/VideoPlayer/VideoRenderers/RenderManager.cpp b/xbmc/cores/VideoPlayer/VideoRenderers/RenderManager.cpp
index 7023dfe..dfc0aac 100644
--- a/xbmc/cores/VideoPlayer/VideoRenderers/RenderManager.cpp
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/RenderManager.cpp
@@ -316,7 +316,7 @@
     m_lateframes = -1.0;
     m_presentevent.notifyAll();
     m_renderedOverlay = false;
-    m_renderDebug = false;
+//    m_renderDebug = false;
     m_clockSync.Reset();
     m_dvdClock.SetVsyncAdjust(0);
 
@@ -1281,7 +1281,7 @@ void CRenderManager::PrepareNextRender()
     double err = fmod(renderPts - nextFramePts, frametime);
     m_clockSync.m_error += err;
     m_clockSync.m_errCount ++;
-    if (m_clockSync.m_errCount > 30)
+    if (m_clockSync.m_errCount > 120)
     {
       double average = m_clockSync.m_error / m_clockSync.m_errCount;
       m_clockSync.m_syncOffset = average;
@@ -1309,9 +1309,13 @@ void CRenderManager::PrepareNextRender()
       // renderer/drivers have internal queues, being slightly late here does not mean that
       // we are really late. The likelihood that we recover decreases the greater m_lateframes
       // get. Skipping a frame is easier than having decoder dropping one (lateframes > 10)
-      double x = (m_lateframes <= 6) ? 0.98 : 0;
+      double x = (m_lateframes <= 10) ? 1.9 : 0.0;
+      std::string audio, video, player; char a[10],v[10];
+      m_playerPort->GetDebugInfo(audio, video, player); audio.copy(a, 6); a[6]=0; video.copy(v, 6); v[6]=0;
       if (renderPts < m_Queue[*iter].pts + x * frametime)
         break;
+      CLog::Log(LOGDEBUG, "CRenderManager::PrepareNextRender m_QueueSkip:%d iter.pts:%0.3f front.pts:%0.3f renderPts:%0.3f  latency:%0.3f %s %s",
+          m_QueueSkip, m_Queue[*iter].pts / DVD_TIME_BASE, nextFramePts / DVD_TIME_BASE, renderPts / DVD_TIME_BASE,  totalLatency / DVD_TIME_BASE, a, v);
       idx = *iter;
       ++iter;
     }
@@ -1325,7 +1329,7 @@ void CRenderManager::PrepareNextRender()
 
     int lateframes = static_cast<int>((renderPts - m_Queue[idx].pts) * m_fps / DVD_TIME_BASE);
     if (lateframes)
-      m_lateframes += lateframes;
+      m_lateframes = lateframes;
     else
       m_lateframes = 0;
     
-- 
2.13.0

