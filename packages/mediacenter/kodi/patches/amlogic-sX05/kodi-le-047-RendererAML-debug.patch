diff --git a/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererAML.cpp b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererAML.cpp
index fbcc7d4..55ba61b 100644
--- a/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererAML.cpp
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererAML.cpp
@@ -95,7 +95,6 @@ bool CRendererAML::RenderCapture(CRenderCapture* capture)
 
 void CRendererAML::AddVideoPicture(const VideoPicture &picture, int index, double currentClock)
 {
-  ReleaseBuffer(index);
 
   BUFFER &buf(m_buffers[index]);
   if (picture.videoBuffer)
@@ -119,6 +118,7 @@ void CRendererAML::ReleaseBuffer(int idx)
         amli->m_amlCodec = nullptr; // Released
       }
       amli->Release();
+CLog::Log(LOGDEBUG, LOGAVTIMING, "CRenderAML::%s - idx:%d", __FUNCTION__, amli->m_bufferIndex);
     }
     buf.videoBuffer = nullptr;
   }
@@ -165,9 +165,11 @@ void CRendererAML::RenderUpdate(int index, int index2, bool clear, unsigned int
       amli->m_amlCodec->SetVideoRect(m_sourceRect, m_destRect);
       amli->m_amlCodec = nullptr; //Mark frame as processed
       m_prevVPts = pts;
+CLog::Log(LOGDEBUG, LOGAVTIMING, "CRenderAML::%s - released idx:%d pts:%0.3f", __FUNCTION__, amli->m_bufferIndex, (double)pts / 90000);
     }
   }
   CAMLCodec::PollFrame();
+CLog::Log(LOGDEBUG, LOGAVTIMING, "CRenderAML::%s - pollframe", __FUNCTION__);
 }
 
 #endif

